function Show-Notification {
    [cmdletbinding()]
    Param (
        [string]
        $ToastTitle,
        [string]
        [parameter(ValueFromPipeline)]
        $ToastText,
         [int]  # New parameter to specify the timeout in minutes
        [parameter(Mandatory=$false)]
        $TimeoutMinutes = 0.25  # Default value is 15 sec

    )
# Load the necessary namespaces for Toast notifications
    [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] > $null
    $Template = [Windows.UI.Notifications.ToastNotificationManager]::GetTemplateContent([Windows.UI.Notifications.ToastTemplateType]::ToastText02)

# Create the XML for the toast notification
    $RawXml = [xml] $Template.GetXml()
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "1"}).AppendChild($RawXml.CreateTextNode($ToastTitle)) > $null
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "2"}).AppendChild($RawXml.CreateTextNode($ToastText)) > $null
# Serialize the XML
    $SerializedXml = New-Object Windows.Data.Xml.Dom.XmlDocument
    $SerializedXml.LoadXml($RawXml.OuterXml)
# Create the ToastNotification object
    $Toast = [Windows.UI.Notifications.ToastNotification]::new($SerializedXml)
    $Toast.Tag = "Malware Removal Tool"
    $Toast.Group = "Malware Removal Tool"
    $Toast.ExpirationTime = [DateTimeOffset]::Now.AddMinutes($TimeoutMinutes)
    
    $Notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("Malware Removal Tool")
    $Notifier.Show($Toast);
}

cd $HOME\Downloads
    # Notify the user about the update if the notification cmdlet is available
    if (-not (Get-Command Show-Notification -ErrorAction SilentlyContinue)) {
        Write-Host "Show-Notification function is not working..."
    } else {
        Show-Notification -TimeoutMinutes 0.05 " Test successful"
    }
	
# Send a request to the GitHub API to fetch the latest release details
try {
$response = Invoke-RestMethod -Uri https://api.github.com/repos/Activekingdom/virusremoval/releases/latest -Method Get
   
    # Construct the URL for downloading the updated script
    $newurl = "https://github.com/Activekingdom/virusremoval/releases/download/"
    $newurltag = $response.tag_name
    $newurlfile = "/Malwarermtool.ps1"
    $Finalnewurl = "$newurl$newurltag$newurlfile"

# Get the local script file and ensure it exists
$SourceFile = Get-ChildItem -Path '.\Malwarermtool.ps1' -File | Select-Object -ExpandProperty FullName
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash
} catch {
	Write-Host "Error Getting information from github.com" -ForegroundColor Red
}

# Compare the local script hash with the expected hash from the GitHub response
if ($SourceHash -eq $response.body) {
    # If hashes match, the script is up to date
    Write-Host "Malware Removal Tool IS Up To Date.."
    Start-Sleep -Seconds 2
} elseif ($SourceHash -ne $response.body) {
    # If hashes do not match, initiate an update
    Clear-Host

    Write-Host "Hash Is Not Right Or Malware Removal Tool Is Out Of Date. Updating To New version" -ForegroundColor Red
	Show-Notification "Is Out Of Date. or Hash Is Not Right. Updating To New version" $($response.tag_name)
     try {
        Invoke-WebRequest -Uri $Finalnewurl -MaximumRedirection 2 -OutFile "Malwarermtool.ps1"
        sleep 1
           .\Malwarermtool.ps1
    } catch {
        Write-Host "Error downloading the update. Exiting..." -ForegroundColor Red
		Show-Notification "Error downloading the update. Exiting..."
		Start-Sleep 2
        exit
    }

    Start-Sleep -Seconds 3

    # Remove the old script if it exists
    if (Test-Path -Path '.\Malwarermtool.ps1') {
        Remove-Item -Path '.\Malwarermtool.ps1' -Force
    } else {
        Write-Host "File does not exist. Skipping removal."
    }

    # Verify the updated script exists after download
    if (-Not (Test-Path -Path '.\Malwarermtool.ps1')) {
        Write-Host "Failed to download the updated script. Exiting..." -ForegroundColor Red
        exit
    }

    try {
        # Execute the updated script
        .\Malwarermtool.ps1
    } catch {
        # Handle errors during script execution
        Write-Host "Failed to execute the updated script. Please check the file and try again." -ForegroundColor Red
        exit
    }

    Start-Sleep -Seconds 10
    exit
} else {
    # If the script is up to date
    Write-Host "Script Is Up to Date..."
    Show-Notification "Script is up to date version " $($response.tag_name)
}
try {
        # Make a folder
        mkdir Malwaretools
        cd Malwaretools
    } catch {
        # Handle error during script execution
        Write-Host "Malwaretools Folder Found"
       
    }

#update Windows defender

Write-Host "Trying To Update Windows Defender..."
Set-Location -Path "$env:ProgramFiles/Windows Defender"
if (Test-Path ".\MpCmdRun.exe") {
	Set-MpPreference -DisableRealtimeMonitoring $false
		try {
		Add-MpPreference -AttackSurfaceReductionRules_Ids 56a863a9-875e-4185-98a7-b882c64b5ce5 -AttackSurfaceReductionRules_Actions Warn
		Set-MpPreference -AttackSurfaceReductionRules_Ids 56a863a9-875e-4185-98a7-b882c64b5ce5 -AttackSurfaceReductionRules_Actions Warn
		} catch {
		write-host "Error Setting Block abuse of exploited vulnerable signed drivers"
		}
     $updateOutput = Start-Process -FilePath "cmd.exe" -ArgumentList "/c MpCmdRun.exe -SignatureUpdate" -Wait -NoNewWindow -PassThru
	   if ($updateOutput.ExitCode -eq 0) {
        Write-Output "Windows Defender platform update completed successfully."
    } else {
        Write-Warning "No platform updates found, or there was an issue updating."
    }
	clear-variable updateOutput
} else {
    Write-Host "MpCmdRun.exe not found. Please verify your Windows Defender installation."
    }

cd $HOME\Downloads\Malwaretools

# Create the registry key for disabling Copilot
New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows" -Name "Windows Copilot" -Force
Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Copilot" -Name "TurnOffWindowsCopilot" -Value 1 -Type DWord

#Create Restore Point
#Checkpoint-Computer -Description "beforescript" -RestorePointType MODIFY_SETTINGS

#check for bitlocker

    $BLinfo = Get-Bitlockervolume
    if($BLinfo.ProtectionStatus -eq 'On' -and $BLinfo.EncryptionPercentage -eq '100'){
        write-output "$env:computername - $($BLinfo.MountPoint) is encrypted"
        
        #Get Recovery key
        $RecoveryKey = ($BLinfo.KeyProtector | Where-Object { $_.KeyProtectorType -eq 'RecoveryPassword' }).RecoveryPassword
        $RecoveryKeyLocation = "$HOME\Downloads\bitlockerrecoverykey.txt"
        Clear-Host
        Write-Host "Recovery Key has been saved to '$RecoveryKeyLocation'"
        Write-Host "You should upload for Online Backup. !Highly Recommended For Data Recovery!"

       # Ask user if they want to upload to cloud
        $UploadChoice = Read-Host "Do you want to upload it to a cloud? (y/n)"
        if ($UploadChoice -eq 'y') {
            while ($true) {
                Clear-Host
                Write-Host "`n`t`t Drive Selector`n" -ForegroundColor Cyan
                Write-Host ""
                Write-Host "[1] Google Drive"
                Write-Host "[2] iCloud"
                Write-Host "[3] OneDrive"
                Write-Host "[4] Dropbox"
                Write-Host "[5] Proton Drive"
                Write-Host "[6] In Downloads folder Not Recommended move the file bitlockerrecoverykey.txt to a usb"
                Write-Host "[e] Exit"

                $DriveSelector = Read-Host "`nSelect an option (leave blank to exit)"
                
                switch ($DriveSelector) {
                    1 { Start-Process "https://drive.google.com/drive/my-drive"; break }
                    2 { Start-Process "https://www.icloud.com/iclouddrive"; break }
                    3 { Start-Process "https://onedrive.live.com/login/"; break }
                    4 { Start-Process "https://www.dropbox.com/login"; break }
                    5 { Start-Process "https://account.proton.me/drive"; break }
                    6 { Set-Content -Path $RecoveryKeyLocation -Value $RecoveryKey -Force }
                    'e' { Write-Host "Exiting selector. Remember to back up your recovery key."; break }
                    default { Write-Host "Invalid selection. Please choose a valid option." }
                }
            }
        } else {
            Write-Host "Skipping backup. Ensure you save the recovery key securely."
        }
    } else {
        Write-Host "BitLocker is not enabled on this system."
    }
write-Host "This should Fix Windows updates y or n"
$Ask = Read-Host "A bug was found in the host entry list in an old version of this script? Windows Defender will block this you have to Real-time protection temporarily"
if ($Ask -eq 'y') {
#open Windows security

start windowsdefender:

# Loop until Windows Defender real-time monitoring is Disabled
while ($true) {
    # Check if Windows Defender real-time monitoring is Disabled
    $realtimeMonitoringDisabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringDisabled -eq $true) {
        # Real-time monitoring is enabled, perform further actions here
        Write-Host ""
        Write-Host "Windows Defender real-time monitoring is enabled. Please disable Windows Defender Real-time protection."
        # Your further actions here
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is enabled
        Write-Host "Windows Defender real-time monitoring is enabled. Retrying... !Please Disable Realtime Protection!! "
        Start-Sleep -Seconds 7  # Wait for 7 seconds before checking again
    }
}

##edit windoes hosts file
$domainsToRemove = @(
    "data.microsoft.com",
    "msftconnecttest.com",
    "azureedge.net",
    "activity.windows.com",
    "bingapis.com",
    "msedge.net",
    "assets.msn.com",
    "scorecardresearch.com",
    "edge.microsoft.com",
    "tdata.msn.com",
    "telemetry.microsoft.com",
    "wns.notify.windows.com.akadns.net",
    "us.vortex-win.data.microsoft.com",
    "us-v10.events.data.microsoft.com",
    "urs.microsoft.com.nsatc.net",
    "watson.telemetry.microsoft.com",
    "watson.ppe.telemetry.microsoft.com",
    "vsgallery.com",
    "watson.live.com",
    "watson.microsoft.com",
    "telemetry.remoteapp.windowsazure.com",
    "telemetry.urs.microsoft.com"
)

# Get the file path
$hostsFilePath = "$env:windir\System32\drivers\etc\hosts"

# Read all lines from the hosts file
$hostsContent = Get-Content -Path $hostsFilePath

# Filter out the lines that contain any of the domains to remove
$filteredContent = $hostsContent | Where-Object { 
    # Remove any comment symbols (#) and trim the line for the domain part
    $line = $_.Trim()
    $line -notmatch '^\s*#' -and $domainsToRemove -notcontains ($line -replace '.*\s+', '') # Keep lines not matching the domains
}
# Overwrite the hosts file with the filtered content
$filteredContent | Set-Content $hostsFilePath

Show-Notification -TimeoutMinutes 0.2 "Turn ON real time protection."
Write-Host "Turn ON real time scanner."
# Loop until Windows Defender real-time monitoring is enabled
while ($true) {
    # Check if Windows Defender real-time monitoring is enabled
    $realtimeMonitoringEnabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringEnabled -eq $false) {

        Write-Host "Windows Defender real-time monitoring is Enable."
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is not enabled
        Show-Notification "Windows Defender real-time monitoring is not enabled. Please enable Windows Defender Real-time protection..."
        Write-Host "Windows Defender real-time monitoring is not enabled. Please enable Windows Defender Real-time protection..."
        Start-Sleep -Seconds 15  # Wait for 15 seconds before checking again
	Clear-Host
    }
}
} else {
Write-Host "Skipping..."
}
clear-variable Ask



#Ultimate Windows Utility by Chris Titus
	try {
	$Ask = Read-Host "Do you need The Ultimate Windows Utility by Chris Titus? !A litte more advanced version for debloting "
    if ($Ask -eq 'y') {
        $requiredrestart = 1
        clear-variable Ask
        iwr -useb https://christitus.com/win | iex
        Clear-Host
    } else {
    clear-variable Ask
        Write-Host "Skipping..."
    }
} catch {
    Write-Host "An error occurred: $_"
    Write-Host "Please check your internet connection or try again later."
}

#Privacy sexy
$Ask = Read-Host "Open privacy.sexy ? The recommended way to debloat and speed up the computer "
if ($Ask -eq 'y') {
$requiredrestart
	Set-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced -Name HideFileExt -Value 0
	Stop-Process -Name explorer -Force
	start-sleep 2
    Start-Process explorer -Force
Clear-Host
Write-Host "If you need more time to reading how to do this check at this window here. It will have all Step by Step Instructions"
Show-Notification -TimeoutMinutes 0.6 "A history of Step by Step instructions is in the windows powershell window"
Write-Host ""
start-Sleep 4
Start-Process "https://privacy.sexy/"
start-sleep 15
Write-Host "In the top middle of the page of privacy.sexy Look for Windows and click on it. It's at Windows | macOS | Linux "
Show-Notification "In the top middle of the page of privacy.sexy Look for Windows and click on it."
start-Sleep 6
Write-Host "Next at the top left look for Standard and click on it. It's at Select: None | Standard | Strict | All "
Show-Notification "Next at the top left look for Standard and click on it."
start-Sleep 6
Write-Host "Next at the bottom middle click on the green button the one on the left that says Download. Then save it to your downloads folder !important"
Write-Host "The file name should be privacy-script.bat if not change it to privacy-script.bat"
Show-Notification "Next at the bottom middle click on the green the one on the left button that says Download. Then save it to your downloads folder"
start-Sleep 9
Write-Host ""
Write-Host "If the file not named privacy-script.bat and in the Downloads Folder it will not run you must remaned to the file you downloaded to privacy-script.bat "
Write-Host ""
while ($true) {
    # Define the expected file path
    $expectedFilePath = "$HOME\Downloads\privacy-script.bat"
    
    if (Test-Path $expectedFilePath) {
        # If the file exists, execute it with elevated permissions
		
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c start $expectedFilePath" -Wait -Verb RunAs
        break # Exit the loop
    } else {
        # It is not in the Downloads folder and named privacy-script.bat
        Write-Host "The file dose not look like it is in the Downloads Folder or is not remaned to privacy-script.bat"
       Show-Notification "The file dose not look like it is in the Downloads Folder or is not name to privacy-script.bat"
    }
    
    # Wait for 15 seconds before checking again
    Start-Sleep -Seconds 15
}
clear-variable Ask
} else { 
    clear-variable Ask
        Write-Host "Skipping..."
}


#HotCakeX 
	try {
	Write-Host -BackgroundColor Red "This is not for gaming this is if you plan to use only Microsoft stuff like Edge only browsing"
    $Ask = Read-Host "HotCakeX Harden Windows Security Microsoft-recommended configuration ? ! Extremely advanced version for windows security"
    if ($Ask -eq 'y') {
        $requiredrestart = 1
        clear-variable Ask
        (irm 'https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/main/Harden-Windows-Security.ps1')+'P' | iex
    } else {
    clear-variable Ask
        Write-Host "Skipping..."
    }
} catch {
    Write-Host "An error occurred: $_"
    Write-Host "Please check your internet connection or try again later."
}


$AskDown = Read-host "Start download of av programs? y or n"
if ($AskDown -eq 'y') {
#Sec AV#
try {
Invoke-WebRequest -Uri "https://download.sophos.com/endpoint/clients/HitmanPro_x64.exe" -MaximumRedirection 2 -OutFile "HitmanPro_x64.exe"
} catch {
write-host "Error in Downloading HitmanPro_x64"
}
try {
Invoke-WebRequest -Uri "https://zemana.com/downloads/Zemana.AntiMalware.Setup.exe" -MaximumRedirection 2 -OutFile "ZemanaAntiMalwareSetup.exe"
} catch {
write-host "Error in Downloading Zemana.AntiMalware"
}
try {
Invoke-WebRequest -Uri "https://www.malwarebytes.com/api/downloads/mb-windows?filename=MBSetup.exe" -MaximumRedirection 2 -OutFile "MBSetup.exe"
} catch {
write-host "Error in Downloading Malwarebytes"
}

Start-Sleep 4
Write-Host "Opening Browser..."
Start-sleep 3
Start-Process "https://www.emsisoft.com/en/home/emergency-kit/download/"
start-sleep 12
Start-Process "https://www.avast.com/download-thank-you.php?product=AVAST-ONE-FREE-WIN#pc"
start-sleep 12
Start-Process "https://www.norton.com/npe_latest"
start-sleep 12
Start-Process "https://www.trendmicro.com/en_us/forHome/products/housecall.html"
start-Sleep 15
Start-Process "https://download.adlice.com/api?action=download&app=roguekiller&type=setup"
} else {
Write-Host "Skipping downloads..."
}

clear-variable AskDown

$Ask2 = Read-host "Do you need malware analysis tool? y or n"
if ($Ask2 -eq 'y') {
    cd $HOME\Downloads\Malwaretools
try{
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/Autoruns.zip" -MaximumRedirection 2 -OutFile "Autoruns.zip"
} catch {
Write-Host "Error in Downloading sysinternals Autoruns"
}
try {
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/ProcessExplorer.zip" -MaximumRedirection 2 -OutFile "ProcessExplorer.zip"
} catch {
Write-Host "Error in Downloading sysinternals ProcessExplorer"
}
try {
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/TCPView.zip" -MaximumRedirection 2 -OutFile "TCPView.zip"
} catch {
Write-Host "Error in Downloading sysinternals TCPView"
}
try {
Invoke-WebRequest -Uri "https://github.com/mandiant/capa/releases/download/v8.0.1/capa-v8.0.1-windows.zip" -MaximumRedirection 2 -OutFile "capa-v8.0.1-windows.zip"
} catch {
Write-Host "Error in Downloading capa on github.com by mandiant"
}
start-sleep 8
#Unpack archive files
Expand-Archive -Path Autoruns.zip -DestinationPath $HOME\Downloads\Malwaretools
Expand-Archive -Path ProcessExplorer.zip -DestinationPath $HOME\Downloads\Malwaretools
Expand-Archive -Path TCPView.zip -DestinationPath $HOME\Downloads\Malwaretools
Expand-Archive -Path capa-v8.0.1-windows.zip -DestinationPath $HOME\Downloads\Malwaretools

#Remove archive files
rm -force capa-v8.0.1-windows.zip
rm -force Autoruns.zip
rm -force ProcessExplorer.zip
rm -force TCPView.zip
cd $HOME\Downloads
#Pe studio malware analysis
Show-Notification "Please Download pestudio" 
Start-process "https://www.winitor.com/download2"
} else {
Write-Host "Skipping malware analysis tool..."
}
clear-variable Ask2

$isWin11 = (Get-WmiObject Win32_OperatingSystem).Caption -Match "Windows 11"
if ($isWin11 -eq 'True' ) {
$Ask5 = Read-Host "Install AppControl Manager?# Advanced Security Application "
if ($Ask5 -eq 'y') {
winget install 9png1jddtgp8 --force
} else {
Write-Host "Skipping AppControl Manager"
}
Clear-Variable Ask5

} else {
    
}
    $Ask5 = Read-Host "Install Microsoft PC Manager? #Helps you clean temp files."
     if ($Ask5 -eq 'y') {
     #check if MicrosoftEdgeWebView2 is installed
     if (Get-AppxPackage -Name Microsoft.MicrosoftEdgeWebView2 -ErrorAction SilentlyContinue) {
  Write-Host "Microsoft Edge WebView2 is installed..."
} else {
try {
Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -MaximumRedirection 2 -OutFile "MicrosoftEdgeWebview2Setup.exe"
Start-Process -FilePath "WebView2RuntimeSetup.exe" -ArgumentList "/silent /install" -Wait
} catch {
Write-Host "Error Downloading MicrosoftEdgeWebview2Setup.exe"
}
}
Clear-Variable Ask5
    winget install 9pm860492szd --force    
    } else {
    Write-Host "Skipping installing Microsoft PC Manager " 
    }
Clear-Variable Ask5

$Ask5 = Read-Host "Install RustDesk Remote Software?"
if ($Ask5 -eq 'y') {
start-Process "https://github.com/rustdesk/rustdesk/releases/latest"
Show-Notification -TimeoutMinutes 0.7 "please Download the x86-64 MSI(64-bit)"

} else {
Write-Host "Skipping installing RustDesk"
}
Clear-Variable Ask5

try {
    $Ask = Read-Host "Do you need HashCheckr by gurnec on GitHub?"
    if ($Ask -eq 'y') {
        Write-Host "Downloading and installing HashCheck..."
        try {
            Invoke-WebRequest -Uri "https://github.com/gurnec/HashCheck/releases/download/v2.4.0/HashCheckSetup-v2.4.0.exe" -MaximumRedirection 2 -OutFile "HashCheckSetup-v2.4.0.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            Start-Process -FilePath "HashCheckSetup-v2.4.0.exe" -Wait
            Write-Host "HashCheck installed successfully."
        } catch {
            Write-Host "Failed to download or install HashCheck: $_"
        }
    } else {
        Write-Host "Skipping HashCheck installation."
    }

    $Ask2 = Read-Host "Do you want to install a different desktop environment?"
    if ($Ask2 -eq 'y') {
        Write-Host "Downloading and installing Cairo Shell..."
        try {
            Invoke-WebRequest -Uri "https://github.com/cairoshell/cairoshell/releases/download/v0.4.370/CairoSetup_64bit.exe" -MaximumRedirection 2 -OutFile "CairoSetup_64bit.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            Start-Process -FilePath "CairoSetup_64bit.exe" -Wait
            Write-Host "Cairo Shell installed successfully."
        } catch {
            Write-Host "Failed to download or install Cairo Shell: $_"
        }
    } else {
        Write-Host "Skipping Cairo Shell installation."
    }

    $Ask3 = Read-Host "Do you want to install a different firewall by Portmaster?"
    if ($Ask3 -eq 'y') {
        Write-Host "Downloading and installing Portmaster..."
        try {
            Invoke-WebRequest -Uri "https://updates.safing.io/latest/windows_amd64/packages/portmaster-installer.exe" -MaximumRedirection 2 -OutFile "portmaster-installer.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 5
            Start-Process -FilePath "portmaster-installer.exe" -Wait
            Write-Host "Portmaster installed successfully."
        } catch {
            Write-Host "Failed to download or install Portmaster: $_"
        }
    } else {
        Write-Host "Skipping Portmaster installation."
    }
    $Ask4 = Read-Host "Do you need The Revo Uninstaller?"
    if ($Ask4 -eq 'y') {
        Write-Host "Downloading and extracting Revo Uninstaller..."
        try {
            Invoke-WebRequest -Uri "https://download.revouninstaller.com/download/RevoUninstaller_Portable.zip" -MaximumRedirection 2 -OutFile "RevoUninstaller_Portable.zip"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            $extractPath = Join-Path -Path $env:USERPROFILE -ChildPath "Downloads\Malwaretools"
            if (!(Test-Path $extractPath)) { New-Item -ItemType Directory -Path $extractPath }
            Start-Sleep -Seconds 4
            Expand-Archive -Path "RevoUninstaller_Portable.zip" -DestinationPath $extractPath
            Remove-Item -Force "RevoUninstaller_Portable.zip"
            Write-Host "Revo Uninstaller extracted successfully."
        } catch {
            Write-Host "Failed to download or extract Revo Uninstaller: $_"
        }
    } else {
        Write-Host "Skipping Revo Uninstaller installation."
    }

    Write-Host "All tasks completed."
} catch {
    Write-Host "An unexpected error occurred: $_"
}

$Ask = Read-host "Dose The Window Store Need to Be Install? This is the Main way.#If this fails the after the first restarting say type y"
if ($Ask -eq 'y') {
sfc /scannow
Dism /Cleanup-Image /RestoreHealth

try {
try {
PowerShell -ExecutionPolicy Unrestricted -Command "& {$manifest = (Get-AppxPackage Microsoft.WindowsStore).InstallLocation + '\AppxManifest.xml' ; Add-AppxPackage -DisableDevelopmentMode -Register $manifest}"
} catch {
Write-Host "Error installing Microsoft.WindowsStore by Get-AppxPackage... Trying another way"
start-sleep 2
}
Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
} Catch {
Write-host "Error installing Microsoft.WindowsStore by Get-AppxPackage Failed  "
}
$requiredrestart = 1
$windowsstoremain = 0
} else {
write-host "Skiping Window Store Main Install "
$windowsstoremain = 1
}

if ($windowsstoremain -eq 0  ) {

$Ask = Read-host "Backup Install of Windows Store . Only do this if you can't get the Windows Store working after first time you restart."
if ($Ask -eq 'y') {
cd $HOME\Downloads
$requiredrestart = 1
$download = Invoke-WebRequest -Uri "https://github.com/kkkgo/LTSB-Add-MicrosoftStore/archive/refs/heads/master.zip" -MaximumRedirection 2 -OutFile "windowsstorefix.zip"
if (Test-Path "windowsstorefix.zip") {
            Expand-Archive -Path windowsstorefix.zip -DestinationPath "$HOME\Downloads"
            Remove-Item -Force windowsstorefix.zip
            cd windowsstorefix
            cd LTSB-Add-MicrosoftStore-master
            try {
            .\Add-Store.cmd
            } Catch {
            Write-Host "Error in running Add-Store.cmd"
            cd $HOME\Downloads\Malwaretools
            }
            cd $HOME\Downloads\Malwaretools
            Show-Notification "You need to run this script again to make sure this fix worked."
        } else {
            Write-Host "Error: File download failed. Please check your network connection and try again."
            cd $HOME\Downloads\Malwaretools
        }
clear-variable Ask
sleep 3
} else {
    Write-Host "Skipping..."
    clear-variable Ask
  }

  } else {
  write-host "windows store fix found"
  Show-Notification "one more restart required"
  }


# Turn off services not needed on the computer

$services = @(
    "diagnosticshub.standardcollector.service" # Microsoft (R) Diagnostics Hub Standard Collector Service
    "DiagTrack"                                # Diagnostics Tracking Service
    "dmwappushservice"                         # WAP Push Message Routing Service 
    "lfsvc"                                    # Geolocation Service
    "MapsBroker"                               # Downloaded Maps Manager
    "NetTcpPortSharing"                        # Net.Tcp Port Sharing Service
    "RemoteAccess"                             # Routing and Remote Access
    "RemoteRegistry"                           # Remote Registry
    "SharedAccess"                             # Internet Connection Sharing (ICS)
    "TrkWks"                                   # Distributed Link Tracking Client
    "lmhosts"                                  #TCP/IP NetBIOS Helper
    "WMPNetworkSvc"                            # Windows Media Player Network Sharing Service
    "WSearch"                                  # Windows Search
    "lltdsvc"				                   #Link-Layer Topology Discovery Mapper
    "SEMgrSvc"				                   #Payments and NFC/SE Manager
)
foreach ($service in $services) {
    Write-Output "Trying to disable $service"
	Get-Service -Name $service | Stop-Service -Force
    Get-Service -Name $service | Set-Service -StartupType Disabled
}


$isWin11Pro = (Get-CimInstance -Class Win32_OperatingSystem).Caption -Match "Windows 11 Pro"
$isWin10Pro = (Get-CimInstance -Class Win32_OperatingSystem).Caption -Match "Windows 10 Pro"
if ($isWin11Pro -or $isWin10Pro ){

$Ask2 = Read-Host "Would you like to set up AppLocker? Pro E This is not recommended for gaming PCs. Type 'y' to proceed or any other key to cancel."
if ($Ask2 -eq 'y') {
    cd $HOME\Downloads
    try {
        Invoke-WebRequest -Uri "https://drive.usercontent.google.com/uc?id=1RwZJeYjuvaY-xvF1zhEWT8WHrfOs0Jaz&export=download" -MaximumRedirection 2 -OutFile "ThioJoeAppLockerResources-v6.zip"
        start-sleep 3
    } catch {
        Write-Host "Error downloading the file. Please check the URL or your network connection." -ForegroundColor Red
        exit
    }
    
    # Check for the existence of the file instead of using a static delay.
    $Timeout = 60 # Maximum wait time in seconds
    $Elapsed = 0
    while (-not (Test-Path -Path "ThioJoeAppLockerResources-v6.zip") -and $Elapsed -lt $Timeout) {
        Start-Sleep 1
        $Elapsed++
    }

    if (-not (Test-Path -Path "ThioJoeAppLockerResources-v6.zip")) {
        Write-Host "Download failed to complete within the timeout period." -ForegroundColor Red
    }

    $ComparisonHash = "C23E4114D4DB7E1D6BD752DEE412F58C84CEB938EDC5BBC17E81B99C58C46528" 
    $SourceFile = Get-ChildItem -Path .\ThioJoeAppLockerResources-v6.zip -File | Select-Object -ExpandProperty FullName
    try {
        $SourceHash = (Get-FileHash -Path $SourceFile -Algorithm SHA256).Hash
    } catch {
        Write-Host "Error calculating the file hash. Please ensure the file exists and is accessible." -ForegroundColor Red
        
    }

    if ($SourceHash -eq $ComparisonHash) {
        Start-Sleep 2
        Clear-Host
        Write-Host "File is verified and has not been tampered with" -ForegroundColor Green
        Expand-Archive -Path ThioJoeAppLockerResources-v6.zip
        Remove-Item -Force ThioJoeAppLockerResources-v6.zip
        cd '.\ThioJoe AppLocker Resources - v6\'
        $ServiceStatus = Get-Service -Name appidsvc -ErrorAction SilentlyContinue
        if ($ServiceStatus -and $ServiceStatus.Status -ne 'Stopped') {
            Write-Host "AppID Service is already running or configured." -ForegroundColor Yellow
        } else {
            sc.exe config appidsvc start= auto
            Write-Host "AppID Service configured to start automatically." -ForegroundColor Green
        }
        notepad.exe '.\!ReadMe Notes.txt'
    } elseif ($SourceHash -ne $ComparisonHash) {
        Clear-Host
        Write-Host "THE HASH IS NOT EQUAL! WARNING: THIS FILE MIGHT BE TAMPERED WITH OR EDITED" -ForegroundColor Red
        Remove-Item -Force $SourceFile
        Write-Host "$SourceFile has been DELETED..."
        Start-Sleep 4
    }
} else {
    Write-Host "Skiping setting up AppLocker."
}

} else {
start-sleep 1
}


clear-variable Ask2
$Ask2 = Read-Host "Do you want to harden Windows Defender? This process will enhance its security settings. (y/n)"
if ($Ask2 -eq 'y') {
    try {
        Invoke-WebRequest -Uri "https://github.com/AndyFul/ConfigureDefender/archive/refs/heads/master.zip" -MaximumRedirection 3 -OutFile "ConfigureDefender.zip"
    } catch {
        Write-Host "Failed to download ConfigureDefender. Please check your internet connection or the URL."; return
    }

    try {
        Expand-Archive -Path ConfigureDefender.zip -DestinationPath "$HOME/Downloads/Malwaretools"
    } catch {
        Write-Host "Failed to extract the downloaded file."; Remove-Item -Force ConfigureDefender.zip; return
    }

    Remove-Item -Force ConfigureDefender.zip

    if (Test-Path "$HOME/Downloads/Malwaretools/ConfigureDefender-master") {
        Set-Location -Path "$HOME/Downloads/Malwaretools/ConfigureDefender-master"
        if (Test-Path ".\ConfigureDefender.exe") {
            .\ConfigureDefender.exe
        } else {
            Write-Host "ConfigureDefender.exe not found in the extracted files."; return
        }
        Start-Sleep -Seconds 10
        Set-Location -Path "$HOME/Downloads/Malwaretools"
    } else {
        Write-Host "Extraction path not found."; return
    }
} else {            
    Write-Host "No changes made to Windows Defender settings."
}



if ($windowsstorefixbackuprestart = 1) {
Show-Notification "Windows Store Fix Needs you to Restart "
}

if ($requiredrestart = 1) {
Show-Notification "Restart Required!"
} else {
}

rm $env:ProgramData/chocolatey
Write-Host "All Done... "
