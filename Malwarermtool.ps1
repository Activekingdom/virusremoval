If (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator')) {
	Start-Process powershell.exe "-NoProfile -ExecutionPolicy Unrestricted -Scope Process -File `"$PSCommandPath`"" -Verb RunAs
	exit
}


function Show-Notification {
    [cmdletbinding()]
    Param (
        [string]
        $ToastTitle,
        [string]
        [parameter(ValueFromPipeline)]
        $ToastText
    )

    [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] > $null
    $Template = [Windows.UI.Notifications.ToastNotificationManager]::GetTemplateContent([Windows.UI.Notifications.ToastTemplateType]::ToastText02)

    $RawXml = [xml] $Template.GetXml()
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "1"}).AppendChild($RawXml.CreateTextNode($ToastTitle)) > $null
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "2"}).AppendChild($RawXml.CreateTextNode($ToastText)) > $null

    $SerializedXml = New-Object Windows.Data.Xml.Dom.XmlDocument
    $SerializedXml.LoadXml($RawXml.OuterXml)

    $Toast = [Windows.UI.Notifications.ToastNotification]::new($SerializedXml)
    $Toast.Tag = "Malware Removal Tool"
    $Toast.Group = "Malware Removal Tool"
    $Toast.ExpirationTime = [DateTimeOffset]::Now.AddMinutes(1)

    $Notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("Malware Removal Tool")
    $Notifier.Show($Toast);
}


#Check for update
$apiUrl = "https://api.github.com/repos/Activekingdom/virusremoval/releases/latest"

# Send a request to the GitHub API and parse the JSON response
Invoke-RestMethod -Uri $apiUrl -Method Get

$SourceFile = Get-ChildItem -Path '.\Malwarermtool.ps1' -Directory | Select-Object -ExpandProperty FullName
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash
if ($SourceHash -eq $response.body){
 Write-Host "Malware Removal Tool IS Up To Date.."
 sleep 2
}

if ($SourceHash -ne $response.body) {
cls
$versionofscript = $response.tag_name
Write-Host " Malware Removal Tool Is Out Of Date. Updating To New version" -ForegroundColor Red
Show-Notification "Is Out Of Date. Updating To New version $versionofscript"
sleep 3
rm '.\Malwarermtool.ps1'
Invoke-WebRequest -Uri "https://github.com/Activekingdom/virusremoval/releases/download/$versionofscript/Malwarermtool.ps1" -MaximumRedirection 2 -OutFile "Malwarermtool.ps1"

Sleep 10

}
       } else {
write-Host "Error..."
}

cd $home
cd Downloads
#Create Restore Point
Checkpoint-Computer -Description "beforescript" -RestorePointType MODIFY_SETTINGS

#check for bitlocker
$BLinfo = Get-Bitlockervolume
if($BLinfo.ProtectionStatus -eq 'On' -and $BLinfo.EncryptionPercentage -eq '100'){
    write-output "$env:computername - $($BLinfo.MountPoint) is encrypted"
    
    #Get Recovery key
    $recoverykeybit = (Get-BitLockerVolume -MountPoint $BLinfo.MountPoint).KeyProtector
    $recoverykeylocation = "$HOME\Downloads\bitlockerrecoverykey.txt"
    #Write Recovery Key to file
    New-Item -Path $recoverykeylocation -ItemType File -Force
    Set-Content -Path $recoverykeylocation -Value $recoverykeybit
    cls
    Write-Host "Recovery Key has been put to '$recoverykeylocation'"
    Write-Host "You should upload for Online Backup. !Highly Recommended For Data Recovery!"
    $Ask45 = Read-Host "Do you want to upload it to a cloud? To back it up? It's For Data Recovery! "
    if($Ask45 -eq 'y'){
 $Driveselector = 'X'
    while($Driveselector -ne ''){
        Clear-Host
        Write-Host "`n`t`t Drive Selector`n"
	Write-Host ""
        Write-Host -ForegroundColor Cyan "Drive Choice's"
        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "1"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "GoogleDrive"

        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "2"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "iCloud"

        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "3"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "OneDrive"

        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "4"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "Dropbox"

        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "5"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "ProtonDrive"
	    
        Write-Host -ForegroundColor DarkCyan -NoNewline "`n["; Write-Host -NoNewline "e"; Write-Host -ForegroundColor DarkCyan -NoNewline "]"; `
            Write-Host -ForegroundColor DarkCyan "Exit"
	    
        $Algorithmselector = Read-Host "`nSelect A Number: (leave blank to end Selection)"
        # Option 1
        if($Driveselector -eq 1){
           Start-Process "https://drive.google.com/drive/my-drive"
           sleep 3
	   break
        }
        # Option 2
        if($Driveselector -eq 2){
      Start-Process "https://www.icloud.com/iclouddrive"
            sleep 3
            break
        }

  # Option 3
        if($Driveselector -eq 3){
	Start-Process "https://onedrive.live.com/login/"
            sleep 3
            break
        }
  # Option 4
        if($Driveselector -eq 4){
	Start-Process "https://www.dropbox.com/login"
            sleep 3
            break
        }
  # Option 5
        if($Driveselector -eq 5){
	Start-Process "https://account.proton.me/drive"
           sleep 3
	   break
        }
#Option 6
  if($Driveselector -eq 'e') {
  Write-host " exiting selector. You should back up your recovery key."
      break
      }
    }
    
    } else {
    Write-Host "You should upload for Online Backup.But Ok Skipping..."
    }
} else {
Write-Host "Bitlocker in not Enabled..."
}

$Ask = Read-Host "Do you need The Ultimate Windows Utility by Chris Titus?"
if($Ask -eq 'y') {
iwr -useb https://christitus.com/win | iex
} else {
Write-host "Skipping..."
}

clear-variable Ask
$Ask = Read-Host "Do you need The Revo Uninstaller?"
if($Ask -eq 'y') {
Invoke-WebRequest -Uri "https://download.revouninstaller.com/download/RevoUninstaller_Portable.zip" -MaximumRedirection 2 -OutFile "RevoUninstaller_Portable.zip"
mkdir Avtools
cd Avtools
Expand-Archive -Path RevoUninstaller_Portable.zip -DestinationPath $home\Downloads\Avtools
rm -force RevoUninstaller_Portable.zip
cd $home
cd Downloads
} else {
Write-host "Skipping..."
}
clear-variable Ask
$Ask = Read-Host "Do you need HashCheckr by gurnec on github?"
if($Ask -eq 'y') {
Invoke-WebRequest -Uri "https://github.com/gurnec/HashCheck/releases/download/v2.4.0/HashCheckSetup-v2.4.0.exe" -MaximumRedirection 2 -OutFile "HashCheckSetup-v2.4.0.exe"
.\HashCheckSetup-v2.4.0.exe
start-sleep 3
} else {
Write-host "Skipping..."
}
clear-variable Ask2
$Ask2 = Read-Host "Do you want to install a different desktop ?"
    if ($Ask2 -eq 'y'){
    cd Downloads
  Invoke-WebRequest -Uri "https://github.com/cairoshell/cairoshell/releases/download/v0.4.370/CairoSetup_64bit.exe" -MaximumRedirection 2 -OutFile "CairoSetup_64bit.exe"
  clear-variable Ask2
       } else {
write-Host ""
}
clear-variable Ask
$AskDown = Read-host "Start download of av programs? y or n"
if ($AskDown -eq 'y') {
#Sec AV#
Invoke-WebRequest -Uri "https://download.sophos.com/endpoint/clients/HitmanPro_x64.exe" -MaximumRedirection 2 -OutFile "HitmanPro_x64.exe"
Invoke-WebRequest -Uri "https://zemana.com/downloads/Zemana.AntiMalware.Setup.exe" -MaximumRedirection 2 -OutFile "ZemanaAntiMalwareSetup.exe"

$AskBrowser = Read-host "Can I open your browser? y or n"
if ($AskBrowser -eq 'y') {
Write-Host "Opening Browser..."
Start-sleep 3
Start-Process "https://www.emsisoft.com/en/home/emergency-kit/download/"
start-sleep 12
Start-Process "https://www.avast.com/download-thank-you.php?product=AVAST-ONE-FREE-WIN#pc"
start-sleep 12
Start-Process "https://www.norton.com/npe_latest"
start-sleep 12
Start-Process "https://www.trendmicro.com/en_us/forHome/products/housecall.html"
start-Sleep 15
} else {
write-Host "Skipping AV Downloads..."
}
clear-variable Ask
#Asking for malwarebites
$Ask = Read-host "Do you want run malwarebytes? y or n"
if ($Ask -eq 'y'){
Invoke-WebRequest -Uri "https://www.malwarebytes.com/api/downloads/mb-windows?filename=MBSetup.exe" -MaximumRedirection 2 -OutFile "MBSetup.exe"
MBSetup.exe
} else {
Write-Host "Skipping malwarebytes..."
}

} else {
Write-Host "Skipping downloads..."
}
clear-variable AskDown
$Ask2 = Read-host "Do you need malware analysis tool? y or n"
if ($Ask2 -eq 'y') {
mkdir Avtools
cd Avtools
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/Autoruns.zip" -MaximumRedirection 2 -OutFile "Autoruns.zip"
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/ProcessExplorer.zip" -MaximumRedirection 2 -OutFile "ProcessExplorer.zip"
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/TCPView.zip" -MaximumRedirection 2 -OutFile "TCPView.zip"
Invoke-WebRequest -Uri "https://github.com/mandiant/capa/releases/download/v7.0.1/capa-v7.0.1-windows.zip" -MaximumRedirection 2 -OutFile "capa-v7.0.1-windows.zip"

#Unpack archive files
Expand-Archive -Path Autoruns.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path ProcessExplorer.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path TCPView.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path capa-v7.0.1-windows.zip -DestinationPath $home\Downloads\Avtools

#Remove archive files
rm -force capa-v7.0.1-windows.zip
rm -force Autoruns.zip
rm -force ProcessExplorer.zip
rm -force TCPView.zip

#Pe studio malware analysis
Start-process "https://www.winitor.com/download2"
start-Sleep 6
#Give sha256 and compare it to download
$ComparisonHash = (Read-Host "Paste in the sha256 from the website.")

$SourceFile = Read-Host "Pasted the full file path"
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash

$ComparisonHash = $ComparisonHash -replace '\s',''
#Compare-Object -ReferenceObject $SourceHash -DifferenceObject $ComparisonHash -IncludeEqual
if ($SourceHash -eq $ComparisonHash){
	sleep 2
	cls
	Write-Host "They are correct it has not been tampered with" -ForegroundColor green

}

if ($SourceHash -ne $ComparisonHash) {
cls
	Write-Host "THE HASH IS NOT EQUAL! WARNING THIS MIGHT BE TAMPERED WITH OR EDITED" -ForegroundColor Red
	rm -force $SourceFile
	Write-Host "The file has been DELETED..."
	sleep 4
}
cd $home
cd Downloads
} else {
Write-Host "Skipping malware analysis tool..."
}
clear-variable Ask2
# Get some not used services off the computer#
$services = @(
    "diagnosticshub.standardcollector.service" # Microsoft (R) Diagnostics Hub Standard Collector Service
    "DiagTrack"                                # Diagnostics Tracking Service
    "dmwappushservice"                         # WAP Push Message Routing Service (see known issues)
    "lfsvc"                                    # Geolocation Service
    "MapsBroker"                               # Downloaded Maps Manager
    "NetTcpPortSharing"                        # Net.Tcp Port Sharing Service
    "RemoteAccess"                             # Routing and Remote Access
    "RemoteRegistry"                           # Remote Registry
    "SharedAccess"                             # Internet Connection Sharing (ICS)
    "TrkWks"                                   # Distributed Link Tracking Client
    "lmhosts"                                  #TCP/IP NetBIOS Helper
    "WMPNetworkSvc"                            # Windows Media Player Network Sharing Service
    "WSearch"                                  # Windows Search
    "lltdsvc"				       #Link-Layer Topology Discovery Mapper
    "SEMgrSvc"				       #Payments and NFC/SE Manager
)
foreach ($service in $services) {
    Write-Output "Trying to disable $service"
	Get-Service -Name $service | Stop-Service -Force
    Get-Service -Name $service | Set-Service -StartupType Disabled
}
clear-variable Ask
write-Host ""
Write-Host "Windows Defender is not going to like this. It think's it's malware but it is not"
$Ask = Read-Host "Do you want to add host entry's? y or n ...Windows Defender will block this go to defender and allow it"
if ($Ask -eq 'y') {
#open Windows security
start windowsdefender:

# Loop until Windows Defender real-time monitoring is Disabled
while ($true) {
    # Check if Windows Defender real-time monitoring is Disabled
    $realtimeMonitoringDisabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringDisabled -eq $true) {
        # Real-time monitoring is enabled, perform further actions here
        Write-Host "Windows Defender real-time monitoring is enabled. Please disable Windows Defender Real-time protection."
        # Your further actions here
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is enabled
        Write-Host "Windows Defender real-time monitoring is enabled. Retrying... !Please Disable Realtime Protection!! "
        Start-Sleep -Seconds 7  # Wait for 7 seconds before checking again
    }
}

##edit windoes hosts file
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tlocalhost" -Force
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n::1`tlocalhost" -Force
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tdata.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tmsftconnecttest.com" 
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tazureedge.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tactivity.windows.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tbingapis.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tmsedge.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tassets.msn.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tscorecardresearch.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttedge.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttdata.msn.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twns.notify.windows.com.akadns.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tus.vortex-win.data.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tus-v10.events.data.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`turs.microsoft.com.nsatc.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.telemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.ppe.telemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tvsgallery.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.live.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.remoteapp.windowsazure.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.urs.microsoft.com"
Write-Host "Turn ON real time scanner."
# Loop until Windows Defender real-time monitoring is enabled
while ($true) {
    # Check if Windows Defender real-time monitoring is enabled
    $realtimeMonitoringEnabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringEnabled -eq $false) {
        Write-Host "Windows Defender real-time monitoring is disable. Please re-enable Windows Defender Real-Time Protection"
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is not enabled
        Write-Host "Windows Defender real-time monitoring is not enabled. Please enable Windows Defender Real-time protection..."
        Start-Sleep -Seconds 7  # Wait for 7 seconds before checking again
	cls
    }
}

} else {
Write-Host "Skipping..."
}
clear-variable Ask2
clear-variable ComparisonHash
clear-variable SourceFile
clear-variable SourceHash
$Ask2 = Read-Host "Advanced Do you want to setup applocker? Not recommend for gaming PC's ?"
    if ($Ask2 -eq 'y'){
    cd $HOME\Downloads
  Invoke-WebRequest -Uri "https://drive.usercontent.google.com/uc?id=1RwZJeYjuvaY-xvF1zhEWT8WHrfOs0Jaz&export=download" -MaximumRedirection 2 -OutFile "ThioJoeAppLockerResources-v6.zip"
  $ComparisonHash = "C23E4114D4DB7E1D6BD752DEE412F58C84CEB938EDC5BBC17E81B99C58C46528" 
$SourceFile = Get-ChildItem -Path .\ThioJoeAppLockerResources-v6.zip -Directory | Select-Object -ExpandProperty FullName
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash
if ($SourceHash -eq $ComparisonHash){
	sleep 2
	cls
	Write-Host "File is verified it has not been tampered with" -ForegroundColor green
	Expand-Archive -Path ThioJoeAppLockerResources-v6.zip
 	rm -force ThioJoeAppLockerResources-v6.zip
  cd '.\ThioJoe AppLocker Resources - v6\'
  sc.exe config appidsvc start= auto
  notepad.exe '.\!ReadMe Notes.txt'
}

if ($SourceHash -ne $ComparisonHash) {
cls
	Write-Host "THE HASH IS NOT EQUAL! WARNING THIS MIGHT BE TAMPERED WITH OR EDITED" -ForegroundColor Red
	rm -force $SourceFile
	Write-Host "$SourceFile has been DELETED..."
	sleep 4
}
       } else {
write-Host ""
}



clear-variable Ask2
$Ask2 = Read-Host "Do you want to hardden Windows Defender?"
    if ($Ask2 -eq 'y'){
  Invoke-WebRequest -Uri "https://github.com/AndyFul/ConfigureDefender/archive/refs/heads/master.zip" -MaximumRedirection 3 -OutFile "ConfigureDefender.zip"
Expand-Archive -Path ConfigureDefender.zip -DestinationPath $home\Downloads\
rm -force ConfigureDefender.zip
cd ConfigureDefender-master
.\ConfigureDefender.exe
  start-sleep 10
cd $home
cd Downloads
        }else {
write-Host ""
}
Write-host "Trying To Update Windows Defender..."
cd "$env:ProgramFiles\Windows Defender"
.\MpCmdRun.exe -SignatureUpdate

rm $env:ProgramData/chocolatey
Write-Host "All Done..."
