If (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator')) {
	Start-Process powershell.exe "-NoProfile -ExecutionPolicy Unrestricted -Scope Process -File `"$PSCommandPath`"" -Verb RunAs
}
function Show-Notification {
    [cmdletbinding()]
    Param (
        [string]
        $ToastTitle,
        [string]
        [parameter(ValueFromPipeline)]
        $ToastText
    )

    [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] > $null
    $Template = [Windows.UI.Notifications.ToastNotificationManager]::GetTemplateContent([Windows.UI.Notifications.ToastTemplateType]::ToastText02)

    $RawXml = [xml] $Template.GetXml()
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "1"}).AppendChild($RawXml.CreateTextNode($ToastTitle)) > $null
    ($RawXml.toast.visual.binding.text|where {$_.id -eq "2"}).AppendChild($RawXml.CreateTextNode($ToastText)) > $null

    $SerializedXml = New-Object Windows.Data.Xml.Dom.XmlDocument
    $SerializedXml.LoadXml($RawXml.OuterXml)

    $Toast = [Windows.UI.Notifications.ToastNotification]::new($SerializedXml)
    $Toast.Tag = "Malware Removal Tool"
    $Toast.Group = "Malware Removal Tool"
    $Toast.ExpirationTime = [DateTimeOffset]::Now.AddMinutes(1)

    $Notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier("Malware Removal Tool")
    $Notifier.Show($Toast);
}


#Check for update Old

# Send a request to the GitHub API and parse the JSON response
#$response = Invoke-RestMethod -Uri https://api.github.com/repos/Activekingdom/virusremoval/releases/latest -Method Get

#$SourceFile = Get-ChildItem -Path '.\Malwarermtool.ps1' -Directory | Select-Object -ExpandProperty FullName
#$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash
#if ($SourceHash -eq $response.body){
 #Write-Host "Malware Removal Tool IS Up To Date.."
 #sleep 2
#}
#if ($SourceHash -ne $response.body) {
#cls
#$versionofscript = $response.tag_name
#Write-Host " Hash Is Not Right Or .Malware Removal Tool Is Out Of Date. Updating To New version" -ForegroundColor Red
#Show-Notification "Is Out Of Date. or Hash Is Not Right. Updating To New version $response.tag_name "
#sleep 3
#$newurl = "https://github.com/Activekingdom/virusremoval/releases/download/"
#$newurltag = $response.tag_name
#$newurlfile = "/Malwarermtool.ps1"
#$combineurl = $newurl + $newurltag
#$Finalnewurl = $combineurl + $newurlfile
#rm '.\Malwarermtool.ps1'
#Invoke-WebRequest -Uri $Finalnewurl -MaximumRedirection 2 -OutFile "Malwarermtool.ps1"
#.\Malwarermtool.ps1
#Sleep 10
#exit
#} else {
#write-Host "Script Is Up to Date..."
#Show-Notification "Up to Date. Version $response.tag_name"
#}


# Send a request to the GitHub API to fetch the latest release details
$response = Invoke-RestMethod -Uri https://api.github.com/repos/Activekingdom/virusremoval/releases/latest -Method Get
   
    # Construct the URL for downloading the updated script
    $newurl = "https://github.com/Activekingdom/virusremoval/releases/download/"
    $newurltag = $response.tag_name
    $newurlfile = "/Malwarermtool.ps1"
    $Finalnewurl = "$newurl$newurltag$newurlfile"

# Get the local script file and ensure it exists
$SourceFile = Get-ChildItem -Path '.\Malwarermtool.ps1' -File | Select-Object -ExpandProperty FullName
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash


# Compare the local script hash with the expected hash from the GitHub response
if ($SourceHash -eq $response.body) {
    # If hashes match, the script is up to date
    Write-Host "Malware Removal Tool IS Up To Date.."
    Start-Sleep -Seconds 2
} elseif ($SourceHash -ne $response.body) {
    # If hashes do not match, initiate an update
    cls

    Write-Host "Hash Is Not Right Or Malware Removal Tool Is Out Of Date. Updating To New version" -ForegroundColor Red
     try {
        Invoke-WebRequest -Uri $Finalnewurl -MaximumRedirection 2 -OutFile "Malwarermtool.ps1"
        sleep 3
           .\Malwarermtool.ps1
    } catch {
        Write-Host "Error downloading the update. Exiting..." -ForegroundColor Red
        exit
    }
    # Notify the user about the update if the notification cmdlet is available
    if (-not (Get-Command Show-Notification -ErrorAction SilentlyContinue)) {
        Write-Host "Show-Notification cmdlet not available. Consider installing or configuring it."
    } else {
        Show-Notification "Is Out Of Date. or Hash Is Not Right. Updating To New version" $($response.tag_name)
    }

    Start-Sleep -Seconds 3

    # Remove the old script if it exists
    if (Test-Path -Path '.\Malwarermtool.ps1') {
        Remove-Item -Path '.\Malwarermtool.ps1' -Force
    } else {
        Write-Host "File does not exist. Skipping removal."
    }

    # Download the updated script
   try {
        Invoke-WebRequest -Uri $Finalnewurl -MaximumRedirection 2 -OutFile "Malwarermtool.ps1"
    } catch {
        Write-Host "Error downloading the update. Exiting..." -ForegroundColor Red
        exit
    }

    # Verify the updated script exists after download
    if (-Not (Test-Path -Path '.\Malwarermtool.ps1')) {
        Write-Host "Failed to download the updated script. Exiting..." -ForegroundColor Red
        exit
    }

    try {
        # Execute the updated script
        .\Malwarermtool.ps1
    } catch {
        # Handle errors during script execution
        Write-Host "Failed to execute the updated script. Please check the file and try again." -ForegroundColor Red
        exit
    }

    Start-Sleep -Seconds 10
    exit
} else {
    # If the script is up to date
    Write-Host "Script Is Up to Date..."

    # Notify the user about the current state
    if (-not (Get-Command Show-Notification -ErrorAction SilentlyContinue)) {
        Write-Host "Error somthing is wrong with Show-Notification function.."
    } else {
        Show-Notification -Message "Up to Date. Version $($response.tag_name)"
    }
}


cd $home
cd Downloads
#Create Restore Point
#Checkpoint-Computer -Description "beforescript" -RestorePointType MODIFY_SETTINGS

#check for bitlocker
try {
    $BLinfo = Get-Bitlockervolume
    if($BLinfo.ProtectionStatus -eq 'On' -and $BLinfo.EncryptionPercentage -eq '100'){
        write-output "$env:computername - $($BLinfo.MountPoint) is encrypted"
        
        #Get Recovery key
        $RecoveryKey = ($BLinfo.KeyProtector | Where-Object { $_.KeyProtectorType -eq 'RecoveryPassword' }).RecoveryPassword
        $RecoveryKeyLocation = "$HOME\Downloads\bitlockerrecoverykey.txt"

        #Write Recovery Key to file
        Set-Content -Path $RecoveryKeyLocation -Value $RecoveryKey -Force
        cls
        Write-Host "Recovery Key has been saved to '$RecoveryKeyLocation'"
        Write-Host "You should upload for Online Backup. !Highly Recommended For Data Recovery!"

       # Ask user if they want to upload to cloud
        $UploadChoice = Read-Host "Do you want to upload it to a cloud? (y/n)"
        if ($UploadChoice -eq 'y') {
            while ($true) {
                Clear-Host
                Write-Host "`n`t`t Drive Selector`n" -ForegroundColor Cyan
                Write-Host ""
                Write-Host "[1] Google Drive"
                Write-Host "[2] iCloud"
                Write-Host "[3] OneDrive"
                Write-Host "[4] Dropbox"
                Write-Host "[5] Proton Drive"
                Write-Host "[e] Exit"

                $DriveSelector = Read-Host "`nSelect an option (leave blank to exit)"
                
                switch ($DriveSelector) {
                    1 { Start-Process "https://drive.google.com/drive/my-drive"; break }
                    2 { Start-Process "https://www.icloud.com/iclouddrive"; break }
                    3 { Start-Process "https://onedrive.live.com/login/"; break }
                    4 { Start-Process "https://www.dropbox.com/login"; break }
                    5 { Start-Process "https://account.proton.me/drive"; break }
                    'e' { Write-Host "Exiting selector. Remember to back up your recovery key."; break }
                    default { Write-Host "Invalid selection. Please choose a valid option." }
                }
            }
        } else {
            Write-Host "Skipping online backup. Ensure you save the recovery key securely."
        }
    } else {
        Write-Host "BitLocker is not enabled on this system."
        Write-Host "To enable BitLocker, follow these steps:"
        Write-Host "1. Open the Control Panel and navigate to 'System and Security'."
        Write-Host "2. Select 'BitLocker Drive Encryption'."
        Write-Host "3. Choose a drive to encrypt and click 'Turn on BitLocker'."
        Write-Host "4. Follow the on-screen instructions to complete the setup."
        Write-Host "5. Save your recovery key in a secure location."
    }
} catch {
    Write-Host "An error occurred while retrieving BitLocker information. Ensure you have administrative privileges and try again." -ForegroundColor Red
}

$Ask = Read-Host "Do you need The Ultimate Windows Utility by Chris Titus?"
try {
    if ($Ask -eq 'y') {
        $requiredrestart = 1
        clear-variable Ask
        iwr -useb https://christitus.com/win | iex
    } else {
    clear-variable Ask
        Write-Host "Skipping..."
    }
} catch {
    Write-Host "An error occurred: $_"
    Write-Host "Please check your internet connection or try again later."
}

try {
    $Ask = Read-Host "Do you need HashCheckr by gurnec on GitHub?"
    if ($Ask -eq 'y') {
        Write-Host "Downloading and installing HashCheck..."
        try {
            Invoke-WebRequest -Uri "https://github.com/gurnec/HashCheck/releases/download/v2.4.0/HashCheckSetup-v2.4.0.exe" -MaximumRedirection 2 -OutFile "HashCheckSetup-v2.4.0.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            Start-Process -FilePath "HashCheckSetup-v2.4.0.exe" -Wait
            Write-Host "HashCheck installed successfully."
        } catch {
            Write-Host "Failed to download or install HashCheck: $_"
        }
    } else {
        Write-Host "Skipping HashCheck installation."
    }

    $Ask2 = Read-Host "Do you want to install a different desktop environment?"
    if ($Ask2 -eq 'y') {
        Write-Host "Downloading and installing Cairo Shell..."
        try {
            $downloadPath = Join-Path -Path $env:USERPROFILE -ChildPath "Downloads"
            if (!(Test-Path $downloadPath)) { New-Item -ItemType Directory -Path $downloadPath }
            Set-Location -Path $downloadPath
            Invoke-WebRequest -Uri "https://github.com/cairoshell/cairoshell/releases/download/v0.4.370/CairoSetup_64bit.exe" -MaximumRedirection 2 -OutFile "CairoSetup_64bit.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            Start-Process -FilePath "CairoSetup_64bit.exe" -Wait
            Write-Host "Cairo Shell installed successfully."
        } catch {
            Write-Host "Failed to download or install Cairo Shell: $_"
        }
    } else {
        Write-Host "Skipping Cairo Shell installation."
    }

    $Ask3 = Read-Host "Do you want to install a different firewall by Portmaster?"
    if ($Ask3 -eq 'y') {
        Write-Host "Downloading and installing Portmaster..."
        try {
            $downloadPath = Join-Path -Path $env:USERPROFILE -ChildPath "Downloads"
            if (!(Test-Path $downloadPath)) { New-Item -ItemType Directory -Path $downloadPath }
            Set-Location -Path $downloadPath
            Invoke-WebRequest -Uri "https://updates.safing.io/latest/windows_amd64/packages/portmaster-installer.exe" -MaximumRedirection 2 -OutFile "portmaster-installer.exe"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            Start-Process -FilePath "portmaster-installer.exe" -Wait
            Write-Host "Portmaster installed successfully."
        } catch {
            Write-Host "Failed to download or install Portmaster: $_"
        }
    } else {
        Write-Host "Skipping Portmaster installation."
    }

    $Ask4 = Read-Host "Do you need The Revo Uninstaller?"
    if ($Ask4 -eq 'y') {
        Write-Host "Downloading and extracting Revo Uninstaller..."
        try {
            Invoke-WebRequest -Uri "https://download.revouninstaller.com/download/RevoUninstaller_Portable.zip" -MaximumRedirection 2 -OutFile "RevoUninstaller_Portable.zip"
            # Adding a delay to ensure the download completes before proceeding.
            start-sleep 4
            $extractPath = Join-Path -Path $env:USERPROFILE -ChildPath "Downloads\Avtools"
            if (!(Test-Path $extractPath)) { New-Item -ItemType Directory -Path $extractPath }
            Start-Sleep -Seconds 4
            Expand-Archive -Path "RevoUninstaller_Portable.zip" -DestinationPath $extractPath
            Remove-Item -Force "RevoUninstaller_Portable.zip"
            Write-Host "Revo Uninstaller extracted successfully."
        } catch {
            Write-Host "Failed to download or extract Revo Uninstaller: $_"
        }
    } else {
        Write-Host "Skipping Revo Uninstaller installation."
    }

    Write-Host "All tasks completed."
} catch {
    Write-Host "An unexpected error occurred: $_"
}

$downloadDir = "$HOME\Downloads"
$filePath = Join-Path -Path $downloadDir -ChildPath "windowsstorefix"

if (Test-Path -Path $filePath) {
$windowsstoremain = 1
$Ask = Read-host "After you restart restarted did the window store get fixed?y or n"
if ($Ask -eq 'n') {
try {
PowerShell -ExecutionPolicy Unrestricted -Command "& {$manifest = (Get-AppxPackage Microsoft.WindowsStore).InstallLocation + '\AppxManifest.xml' ; Add-AppxPackage -DisableDevelopmentMode -Register $manifest}"
 } catch {
     Write-Host "Error: Failed to register Windows Store. Please ensure it is installed and try again."
 }
cd $home
cd Downloads
Remove-Item -Path windowsstorefix -Recurse -Force
$windowsstorefixfolder = 1
$windowsstorefixbackuprestart = 1
} else {
    Write-Host "Skipping..."
    cd $home
cd Downloads
Remove-Item -Path windowsstorefix -Recurse -Force
  }
} else {
    Write-Host "windowsstorefix not found"
    $windowsstorefixfolder = 0
}

$Ask = Read-host "Dose The Window Store Need to Be Install? This is the Main way.#If this fails the after the first restarting say type n"
if ($Ask -eq 'y' -and $windowsstoremain -eq 0) {
try {

Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
} Catch {
Write-host "Error restart might be required"
} else {
$windowsstoremain = 1
write-host "Skiping Window Store Install Main"
}
}

if ($windowsstorefixfolder -eq 0 -and $windowsstoremain -eq 1  ) {

$Ask = Read-host "Use this if the windows store main way failed is still not there.Fix the window store?? Only do this if you can't get the Windows Store working after restart. You will haver to run this scrip again."
if ($Ask -eq 'y') {
cd $home
cd Downloads
$download = Invoke-WebRequest -Uri "https://github.com/kkkgo/LTSB-Add-MicrosoftStore/archive/refs/heads/master.zip" -MaximumRedirection 2 -OutFile "windowsstorefix.zip"
if (Test-Path "windowsstorefix.zip") {
            Expand-Archive -Path windowsstorefix.zip -DestinationPath "$home\Downloads"
            Remove-Item -Force windowsstorefix.zip
            cd windowsstorefix
            cd LTSB-Add-MicrosoftStore-master
            try {
            .\Add-Store.cmd
            } Catch {
            Write-Host "Error in running Add-Store.cmd"
            }
            Show-Notification "You need to run this script again to make sure this fix worked."
        } else {
            Write-Host "Error: File download failed. Please check your network connection and try again."
        }
clear-variable Ask
sleep 30
} else {
    Write-Host "Skipping..."
    clear-variable Ask
  }

  } else {
  write-host "windows store fix found"
  Show-Notification "one more restart required"
  }

$AskDown = Read-host "Start download of av programs? y or n"
if ($AskDown -eq 'y') {
#Sec AV#
Invoke-WebRequest -Uri "https://download.sophos.com/endpoint/clients/HitmanPro_x64.exe" -MaximumRedirection 2 -OutFile "HitmanPro_x64.exe"
Invoke-WebRequest -Uri "https://zemana.com/downloads/Zemana.AntiMalware.Setup.exe" -MaximumRedirection 2 -OutFile "ZemanaAntiMalwareSetup.exe"
Start-Sleep 4
$AskBrowser = Read-host "Can I open your browser? y or n"
if ($AskBrowser -eq 'y') {
Write-Host "Opening Browser..."
Start-sleep 3
Start-Process "https://www.emsisoft.com/en/home/emergency-kit/download/"
start-sleep 12
Start-Process "https://www.avast.com/download-thank-you.php?product=AVAST-ONE-FREE-WIN#pc"
start-sleep 12
Start-Process "https://www.norton.com/npe_latest"
start-sleep 12
Start-Process "https://www.trendmicro.com/en_us/forHome/products/housecall.html"
start-Sleep 15
} else {
write-Host "Skipping AV Downloads..."
}
clear-variable Ask
#Asking for malwarebites
$Ask = Read-host "Do you want run malwarebytes? y or n"
if ($Ask -eq 'y'){
Invoke-WebRequest -Uri "https://www.malwarebytes.com/api/downloads/mb-windows?filename=MBSetup.exe" -MaximumRedirection 2 -OutFile "MBSetup.exe"
MBSetup.exe
} else {
Write-Host "Skipping malwarebytes..."
}

} else {
Write-Host "Skipping downloads..."
}

clear-variable AskDown

$Ask2 = Read-host "Do you need malware analysis tool? y or n"
if ($Ask2 -eq 'y') {
mkdir Avtools
cd Avtools
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/Autoruns.zip" -MaximumRedirection 2 -OutFile "Autoruns.zip"
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/ProcessExplorer.zip" -MaximumRedirection 2 -OutFile "ProcessExplorer.zip"
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/TCPView.zip" -MaximumRedirection 2 -OutFile "TCPView.zip"
Invoke-WebRequest -Uri "https://github.com/mandiant/capa/releases/download/v7.0.1/capa-v7.0.1-windows.zip" -MaximumRedirection 2 -OutFile "capa-v7.0.1-windows.zip"
start-sleep 8
#Unpack archive files
Expand-Archive -Path Autoruns.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path ProcessExplorer.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path TCPView.zip -DestinationPath $home\Downloads\Avtools
Expand-Archive -Path capa-v7.0.1-windows.zip -DestinationPath $home\Downloads\Avtools

#Remove archive files
rm -force capa-v7.0.1-windows.zip
rm -force Autoruns.zip
rm -force ProcessExplorer.zip
rm -force TCPView.zip

#Pe studio malware analysis
Start-process "https://www.winitor.com/download2"
start-Sleep 6
#Give sha256 and compare it to download
$ComparisonHash = (Read-Host "Paste in the sha256 from the website.")

$SourceFile = Read-Host "Pasted the full file path"
$SourceHash = (Get-FileHash -Path $SourceFile -Algorithm sha256).hash

$ComparisonHash = $ComparisonHash -replace '\s',''
#Compare-Object -ReferenceObject $SourceHash -DifferenceObject $ComparisonHash -IncludeEqual
if ($SourceHash -eq $ComparisonHash){
	sleep 2
	cls
	Write-Host "They are correct it has not been tampered with" -ForegroundColor green

}

if ($SourceHash -ne $ComparisonHash) {
cls
	Write-Host "THE HASH IS NOT EQUAL! WARNING THIS MIGHT BE TAMPERED WITH OR EDITED" -ForegroundColor Red
	rm -force $SourceFile
	Write-Host "The file has been DELETED..."
	sleep 4
}
cd $home
cd Downloads
} else {
Write-Host "Skipping malware analysis tool..."
}
clear-variable Ask2
# Get some not used services off the computer#
$services = @(
    "diagnosticshub.standardcollector.service" # Microsoft (R) Diagnostics Hub Standard Collector Service
    "DiagTrack"                                # Diagnostics Tracking Service
    "dmwappushservice"                         # WAP Push Message Routing Service 
    "lfsvc"                                    # Geolocation Service
    "MapsBroker"                               # Downloaded Maps Manager
    "NetTcpPortSharing"                        # Net.Tcp Port Sharing Service
    "RemoteAccess"                             # Routing and Remote Access
    "RemoteRegistry"                           # Remote Registry
    "SharedAccess"                             # Internet Connection Sharing (ICS)
    "TrkWks"                                   # Distributed Link Tracking Client
    "lmhosts"                                  #TCP/IP NetBIOS Helper
    "WMPNetworkSvc"                            # Windows Media Player Network Sharing Service
    "WSearch"                                  # Windows Search
    "lltdsvc"				       #Link-Layer Topology Discovery Mapper
    "SEMgrSvc"				       #Payments and NFC/SE Manager
)
foreach ($service in $services) {
    Write-Output "Trying to disable $service"
	Get-Service -Name $service | Stop-Service -Force
    Get-Service -Name $service | Set-Service -StartupType Disabled
}
clear-variable Ask
write-Host ""
Write-Host "Windows Defender is not going to like this. It think's it's malware but it is not"
$Ask = Read-Host "Do you want to add host entry's? y or n ...Windows Defender will block this go to defender and allow it"
if ($Ask -eq 'y') {
#open Windows security
start windowsdefender:

# Loop until Windows Defender real-time monitoring is Disabled
while ($true) {
    # Check if Windows Defender real-time monitoring is Disabled
    $realtimeMonitoringDisabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringDisabled -eq $true) {
        # Real-time monitoring is enabled, perform further actions here
        Write-Host "Windows Defender real-time monitoring is enabled. Please disable Windows Defender Real-time protection."
        # Your further actions here
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is enabled
        Write-Host "Windows Defender real-time monitoring is enabled. Retrying... !Please Disable Realtime Protection!! "
        Start-Sleep -Seconds 7  # Wait for 7 seconds before checking again
    }
}

##edit windoes hosts file
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tlocalhost" -Force
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n::1`tlocalhost" -Force
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tdata.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tmsftconnecttest.com" 
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tazureedge.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tactivity.windows.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tbingapis.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tmsedge.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tassets.msn.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tscorecardresearch.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttedge.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttdata.msn.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twns.notify.windows.com.akadns.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tus.vortex-win.data.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tus-v10.events.data.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`turs.microsoft.com.nsatc.net"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.telemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.ppe.telemetry.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`tvsgallery.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.live.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`twatson.microsoft.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.remoteapp.windowsazure.com"
Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n0.0.0.0`ttelemetry.urs.microsoft.com"
Write-Host "Turn ON real time scanner."
# Loop until Windows Defender real-time monitoring is enabled
while ($true) {
    # Check if Windows Defender real-time monitoring is enabled
    $realtimeMonitoringEnabled = (Get-MpPreference).DisableRealtimeMonitoring
    
    if ($realtimeMonitoringEnabled -eq $false) {
        Write-Host "Windows Defender real-time monitoring is disable. Please re-enable Windows Defender Real-Time Protection"
        break  # Break out of the loop since real-time monitoring is enabled
    } else {
        # Real-time monitoring is not enabled
        Write-Host "Windows Defender real-time monitoring is not enabled. Please enable Windows Defender Real-time protection..."
        Start-Sleep -Seconds 7  # Wait for 7 seconds before checking again
	cls
    }
}

} else {
Write-Host "Skipping..."
}
clear-variable Ask2
clear-variable ComparisonHash
clear-variable SourceFile
clear-variable SourceHash

$Ask2 = Read-Host "Would you like to set up AppLocker? This is not recommended for gaming PCs. Type 'y' to proceed or any other key to cancel."
if ($Ask2 -eq 'y') {
    cd $HOME\Downloads
    try {
        Invoke-WebRequest -Uri "https://drive.usercontent.google.com/uc?id=1RwZJeYjuvaY-xvF1zhEWT8WHrfOs0Jaz&export=download" -MaximumRedirection 2 -OutFile "ThioJoeAppLockerResources-v6.zip"
    } catch {
        Write-Host "Error downloading the file. Please check the URL or your network connection." -ForegroundColor Red
        exit
    }
    
    # Check for the existence of the file instead of using a static delay.
    $Timeout = 60 # Maximum wait time in seconds
    $Elapsed = 0
    while (-not (Test-Path -Path "ThioJoeAppLockerResources-v6.zip") -and $Elapsed -lt $Timeout) {
        Start-Sleep 1
        $Elapsed++
    }

    if (-not (Test-Path -Path "ThioJoeAppLockerResources-v6.zip")) {
        Write-Host "Download failed to complete within the timeout period." -ForegroundColor Red
        exit
    }

    $ComparisonHash = "C23E4114D4DB7E1D6BD752DEE412F58C84CEB938EDC5BBC17E81B99C58C46528" 
    $SourceFile = Get-ChildItem -Path .\ThioJoeAppLockerResources-v6.zip -File | Select-Object -ExpandProperty FullName
    try {
        $SourceHash = (Get-FileHash -Path $SourceFile -Algorithm SHA256).Hash
    } catch {
        Write-Host "Error calculating the file hash. Please ensure the file exists and is accessible." -ForegroundColor Red
        exit
    }

    if ($SourceHash -eq $ComparisonHash) {
        Start-Sleep 2
        Clear-Host
        Write-Host "File is verified and has not been tampered with" -ForegroundColor Green
        Expand-Archive -Path ThioJoeAppLockerResources-v6.zip
        Remove-Item -Force ThioJoeAppLockerResources-v6.zip
        cd '.\ThioJoe AppLocker Resources - v6\'
        $ServiceStatus = Get-Service -Name appidsvc -ErrorAction SilentlyContinue
        if ($ServiceStatus -and $ServiceStatus.Status -ne 'Stopped') {
            Write-Host "AppID Service is already running or configured." -ForegroundColor Yellow
        } else {
            sc.exe config appidsvc start= auto
            Write-Host "AppID Service configured to start automatically." -ForegroundColor Green
        }
        notepad.exe '.\!ReadMe Notes.txt'
    } elseif ($SourceHash -ne $ComparisonHash) {
        Clear-Host
        Write-Host "THE HASH IS NOT EQUAL! WARNING: THIS FILE MIGHT BE TAMPERED WITH OR EDITED" -ForegroundColor Red
        Remove-Item -Force $SourceFile
        Write-Host "$SourceFile has been DELETED..."
        Start-Sleep 4
    }
} else {
    Write-Host "Operation canceled."
}

clear-variable Ask2
$Ask2 = Read-Host "Do you want to harden Windows Defender? This process will enhance its security settings. (y/n)"
if ($Ask2 -eq 'y') {
    try {
        Invoke-WebRequest -Uri "https://github.com/AndyFul/ConfigureDefender/archive/refs/heads/master.zip" -MaximumRedirection 3 -OutFile "ConfigureDefender.zip"
    } catch {
        Write-Host "Failed to download ConfigureDefender. Please check your internet connection or the URL."; return
    }

    try {
        Expand-Archive -Path ConfigureDefender.zip -DestinationPath "$HOME/Downloads/"
    } catch {
        Write-Host "Failed to extract the downloaded file."; Remove-Item -Force ConfigureDefender.zip; return
    }

    Remove-Item -Force ConfigureDefender.zip

    if (Test-Path "$HOME/Downloads/ConfigureDefender-master") {
        Set-Location -Path "$HOME/Downloads/ConfigureDefender-master"
        if (Test-Path ".\ConfigureDefender.exe") {
            .\ConfigureDefender.exe
        } else {
            Write-Host "ConfigureDefender.exe not found in the extracted files."; return
        }
        Start-Sleep -Seconds 10
        Set-Location -Path "$HOME/Downloads"
    } else {
        Write-Host "Extraction path not found."; return
    }
} else {            
    Write-Host "No changes made to Windows Defender settings."
}

Write-Host "Trying To Update Windows Defender..."
Set-Location -Path "$env:ProgramFiles/Windows Defender"
if (Test-Path ".\MpCmdRun.exe") {
    .\MpCmdRun.exe -SignatureUpdate
} else {
    Write-Host "MpCmdRun.exe not found. Please verify your Windows Defender installation."}


if ($windowsstorefixbackuprestart = 1) {
Show-Notification "Windows Store Fix Needs you to Restart "
}

if ($requiredrestart = 1) {
#Show-Notification "Restart Required!"
} else {
}

rm $env:ProgramData/chocolatey
Write-Host "All Done... "
